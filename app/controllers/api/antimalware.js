//CONTROLLER PER LA GESTIONE DEI SERVIZI ANTIMALWARES

const express = require('express');
const router = express.Router();
const formidable = require('formidable');
const config = require('../../../config');
const axios = require('axios');
const FormData = require('form-data');
const fs = require('fs');
const auth = require('../../middlewares/auth');

/*
Limiti:
	Request rate:	4 lookups / min
	Daily quota:	500 lookups / day
	Monthly quota:	15.50 K lookups / month
*/


//File upload
router.post('/analyze', auth, async function(req, res){

	let form = new formidable.IncomingForm();

	form.parse(req, async function (error, fields, files) {
		if(error){
			console.error(error);
			res.status(400).json({status: 400, message: error}) 
		} else {
			var data = [];
			var fileID = -1;

			let fileSize = (files.filetoupload._writeStream.bytesWritten / Math.pow(10,6)).toFixed(3); //From Bytes to MegaBytes
			let filePath = files.filetoupload.filepath;
			let fileName = files.filetoupload.originalFilename;
			let mimetype = files.filetoupload.mimetype;

			console.log("Name: " + fileName);
			console.log("Path: " + filePath);
			console.log("MimeType: " + mimetype);
			console.log("Size: " + fileSize + " MB");

			var link = 'https://www.virustotal.com/api/v3/files';

			if(fileSize <= 32){
				//Upload Standard
				console.log("[Standard Upload]")

				data = await uploadFile(link, filePath, fileName, mimetype);

			} else if(fileSize > 32 && fileSize <= 500) {
				//Get Upload Link (MAX 500 MB)
				console.log("[Upload With Link]")

				const options = {
				  	method: 'GET',
				  	url: link + '/upload_url',
				  	headers: {Accept: 'application/json', 'x-apikey': config.VIRUS_TOTAL_KEY}
				};

				await axios.request(options)
				.then(res => link = res.data.data)
				.catch(err => { status = err.response.status; text = err.response.statusText });

				data = await uploadFile(link, filePath, fileName, mimetype);

			} else {
				console.error("File too large to be processed");
				res.status(413).json({status: 413, message: "File too large to be processed"});
				return;
			}

			fileID = data[0];

			if(fileID == -1 || data[1] != 200){
				console.error(data[2])
				res.status(data[1]).json({status: data[1], message: data[2]});
			}
			else{
				console.log("FileID: " + fileID);
				//res.status(200).json({status: 200, fileID: fileID});

				data = await analyzeFile("", fileID);
				let status = data[0];
				let text = data[1];
				let generalStats = data[2];
				let results = data[3];

				//Minimal version
				var engines = {}

				for (const [key, value] of Object.entries(results)) {
			  		engines[key] = value.category
				}

				if(status != 200){
					console.error(text);
					res.status(status).json({status: status, message: text});
				}
				else{
					console.log("Success")
					res.status(200).json({status: 200, stats: generalStats, engines: engines});
				}
			}
		}
    });
})

function isEmpty(obj) {
	return Object.keys(obj).length === 0 || obj == undefined;
}

async function sleep(millis) {
    return new Promise(resolve => setTimeout(resolve, millis));
}

async function uploadFile(link, filePath, fileName, mimetype){

	console.log("Uploading " + fileName +" with: " + link);

    var id = -1, status = 200, text = "";

	const formdata = new FormData()
	formdata.append('Content-Disposition', 'form-data');
	formdata.append('data', mimetype);
	formdata.append('name', fileName);
	formdata.append('file', fs.createReadStream(filePath));

	const options = {
		method: 'POST',
  		url: link,
		maxContentLength: Infinity,
    	maxBodyLength: Infinity,
	  	headers: {
		    Accept: 'application/json',
		    'x-apikey': config.VIRUS_TOTAL_KEY,
		    'Content-Type': 'multipart/form-data; boundary=' + formdata.getBoundary()
	  	},
	  	data: formdata
	}

	await axios.request(options)
	.then(res => id = res.data.data.id)
	.catch(err => { status = err.response.status; text = err.response.statusText })

	return [id, status, text];
}

async function analyzeFile(link, fileID){
	
	const options = {
		headers: {Accept: 'application/json', 'x-apikey': config.VIRUS_TOTAL_KEY}
	};

	var url = link == "" ? "https://www.virustotal.com/api/v3/analyses/" + fileID : link;

	//console.log("URL: " + url)

	var generalStats = {}, results = {}, status = -1, a_err=false, boo=true, text = "";

	while(boo){
		await axios.get(url, options)
		.then(res => { 
			
			//First Analysis successful
			if(res.data.data.attributes.status == "completed"){
				console.log("First analysis - successful")
				generalStats = res.data.data.attributes.stats;
				results = res.data.data.attributes.results;
				boo = false;
			} else {

				//console.log(res.data.data.links)

				//Loop for getting the analysis url of the item

				url = res.data.data.links.item;
				if(url == undefined)
					url = res.data.data.links.self;
				else
					boo = false
			}
		})
		.catch(err => { console.log("Analysis Error"); status = err.response.status; text = err.response.statusText; a_err=true; boo = false; })
	}

	if(a_err)
		return [ status, text, {}, {} ]; 
	else if(!isEmpty(results)){
		status = 200;
		return [ status, text, generalStats, results ]
	}

	//Test the item unitl its analysis is completed
	while(true){		
		console.log("Item analysis - " + url);
		await axios.get(url, options)
		.then(res => { 
			generalStats = res.data.data.attributes.last_analysis_stats;
			results = res.data.data.attributes.last_analysis_results;
		})
		.catch(err => { console.log("Item Analysis Error"); status = err.response.status; text = err.response.statusText; a_err=true; })

		if(a_err || !isEmpty(results)) break;

		await sleep(3000); //3s sleep between each request
	}

	if(a_err)
		return [ status, text, {}, {} ]; 
	else{
		status = 200;
		return [ status, text, generalStats, results ]
	}
}

module.exports = router